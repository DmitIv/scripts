from typing import Optional
from brownie.typing import AccountsType
from brownie.network.contract import InterfaceContainer
from generated.types import *


class BrownieInterface(InterfaceContainer):
    def ACL(self, address: str, owner: Optional[AccountsType] = None) -> ACL: ...

    def CurveRewardsManager(self, address: str, owner: Optional[AccountsType] = None) -> CurveRewardsManager: ...

    def ERC20(self, address: str, owner: Optional[AccountsType] = None) -> ERC20: ...

    def Finance(self, address: str, owner: Optional[AccountsType] = None) -> Finance: ...

    def Lido(self, address: str, owner: Optional[AccountsType] = None) -> Lido: ...

    def Multicall2(self, address: str, owner: Optional[AccountsType] = None) -> Multicall2: ...

    def NodeOperatorsRegistry(self, address: str, owner: Optional[AccountsType] = None) -> NodeOperatorsRegistry: ...

    def TokenManager(self, address: str, owner: Optional[AccountsType] = None) -> TokenManager: ...

    def Voting(self, address: str, owner: Optional[AccountsType] = None) -> Voting: ...

    def WithdrawalContractProxy(self, address: str,
                                owner: Optional[AccountsType] = None) -> WithdrawalContractProxy: ...
